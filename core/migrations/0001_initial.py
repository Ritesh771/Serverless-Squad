# Generated by Django 5.1 on 2025-10-13 01:48

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('category', models.CharField(max_length=50)),
                ('duration_minutes', models.PositiveIntegerField(default=60)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('customer', 'Customer'), ('vendor', 'Vendor'), ('onboard_manager', 'Onboard Manager'), ('ops_manager', 'Ops Manager'), ('super_admin', 'Super Admin')], default='customer', max_length=20)),
                ('phone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('pincode', models.CharField(blank=True, max_length=10)),
                ('is_available', models.BooleanField(default=False)),
                ('otp_secret', models.CharField(blank=True, max_length=32)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(help_text='e.g., Home, Office, etc.', max_length=50)),
                ('address_line', models.TextField()),
                ('pincode', models.CharField(max_length=10)),
                ('lat', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('lng', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_default', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('login', 'Login'), ('logout', 'Logout'), ('signature_request', 'Signature Request'), ('signature_sign', 'Signature Sign'), ('payment_process', 'Payment Process'), ('status_change', 'Status Change'), ('cache_clear', 'Cache Clear'), ('notification_sent', 'Notification Sent'), ('alert_created', 'Alert Created'), ('alert_resolved', 'Alert Resolved'), ('dispute_created', 'Dispute Created'), ('dispute_assigned', 'Dispute Assigned'), ('dispute_resolved', 'Dispute Resolved'), ('bonus_calculated', 'Bonus Calculated'), ('bonus_approved', 'Bonus Approved'), ('vendor_application_submitted', 'Vendor Application Submitted'), ('vendor_application_reviewed', 'Vendor Application Reviewed'), ('vendor_application_flagged', 'Vendor Application Flagged by AI'), ('document_uploaded', 'Document Uploaded'), ('chat_message_sent', 'Chat Message Sent')], max_length=30)),
                ('resource_type', models.CharField(max_length=50)),
                ('resource_id', models.CharField(max_length=100)),
                ('old_values', models.JSONField(blank=True, null=True)),
                ('new_values', models.JSONField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('signed', 'Signed & Verified'), ('cancelled', 'Cancelled'), ('disputed', 'Disputed')], default='pending', max_length=20)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('pincode', models.CharField(max_length=10)),
                ('scheduled_date', models.DateTimeField()),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('estimated_service_duration_minutes', models.PositiveIntegerField(blank=True, help_text='Predicted service duration', null=True)),
                ('travel_time_to_location_minutes', models.PositiveIntegerField(blank=True, help_text='Travel time to customer location', null=True)),
                ('travel_time_from_location_minutes', models.PositiveIntegerField(blank=True, help_text='Travel time from customer location', null=True)),
                ('buffer_before_minutes', models.PositiveIntegerField(default=15, help_text='Buffer time before service')),
                ('buffer_after_minutes', models.PositiveIntegerField(default=15, help_text='Buffer time after service')),
                ('actual_start_time', models.DateTimeField(blank=True, help_text='When vendor should start traveling', null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, help_text='When vendor is free for next booking', null=True)),
                ('customer_notes', models.TextField(blank=True)),
                ('vendor_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_bookings', to=settings.AUTH_USER_MODEL)),
                ('vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vendor_bookings', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.service')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('on_hold', 'On Hold')], default='pending', max_length=20)),
                ('payment_type', models.CharField(choices=[('automatic', 'Automatic'), ('manual', 'Manual')], default='automatic', max_length=20)),
                ('stripe_payment_intent_id', models.CharField(blank=True, max_length=200)),
                ('stripe_charge_id', models.CharField(blank=True, max_length=200)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='core.booking')),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='photos/%Y/%m/%d/')),
                ('image_type', models.CharField(choices=[('before', 'Before'), ('after', 'After'), ('additional', 'Additional')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='core.booking')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PincodeAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pincode', models.CharField(db_index=True, max_length=10)),
                ('date', models.DateField(db_index=True)),
                ('total_bookings', models.PositiveIntegerField(default=0)),
                ('pending_bookings', models.PositiveIntegerField(default=0)),
                ('completed_bookings', models.PositiveIntegerField(default=0)),
                ('cancelled_bookings', models.PositiveIntegerField(default=0)),
                ('available_vendors', models.PositiveIntegerField(default=0)),
                ('active_vendors', models.PositiveIntegerField(default=0)),
                ('avg_response_time_minutes', models.FloatField(blank=True, null=True)),
                ('avg_completion_time_hours', models.FloatField(blank=True, null=True)),
                ('customer_satisfaction_avg', models.FloatField(blank=True, null=True)),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('avg_booking_value', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('high_demand_alert_sent', models.BooleanField(default=False)),
                ('low_vendor_alert_sent', models.BooleanField(default=False)),
                ('promotional_alert_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-date', 'pincode'],
                'indexes': [models.Index(fields=['pincode', 'date'], name='core_pincod_pincode_2425b7_idx'), models.Index(fields=['total_bookings'], name='core_pincod_total_b_c81772_idx'), models.Index(fields=['available_vendors'], name='core_pincod_availab_e51a8f_idx')],
                'unique_together': {('pincode', 'date')},
            },
        ),
        migrations.CreateModel(
            name='Signature',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('signed', 'Signed'), ('expired', 'Expired'), ('disputed', 'Disputed')], default='pending', max_length=20)),
                ('signature_hash', models.CharField(blank=True, max_length=64)),
                ('signature_data', models.JSONField(blank=True, null=True)),
                ('satisfaction_rating', models.PositiveIntegerField(blank=True, null=True)),
                ('satisfaction_comments', models.TextField(blank=True)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('signed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField()),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='signature', to='core.booking')),
                ('signed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Dispute',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dispute_type', models.CharField(choices=[('service_quality', 'Service Quality'), ('payment_issue', 'Payment Issue'), ('signature_refusal', 'Signature Refusal'), ('vendor_behavior', 'Vendor Behavior'), ('customer_behavior', 'Customer Behavior'), ('booking_cancellation', 'Booking Cancellation'), ('other', 'Other')], max_length=30)),
                ('status', models.CharField(choices=[('open', 'Open'), ('investigating', 'Under Investigation'), ('mediation', 'In Mediation'), ('resolved', 'Resolved'), ('escalated', 'Escalated'), ('closed', 'Closed')], default='open', max_length=20)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('customer_evidence', models.JSONField(blank=True, help_text="Customer's evidence including photos, documents", null=True)),
                ('vendor_evidence', models.JSONField(blank=True, help_text="Vendor's evidence including photos, documents", null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('resolution_evidence', models.JSONField(blank=True, null=True)),
                ('resolution_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Refund or compensation amount', max_digits=8, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assigned_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('escalation_reason', models.TextField(blank=True)),
                ('assigned_mediator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mediated_disputes', to=settings.AUTH_USER_MODEL)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disputes', to='core.booking')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_disputes', to=settings.AUTH_USER_MODEL)),
                ('escalated_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='escalated_disputes', to=settings.AUTH_USER_MODEL)),
                ('vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vendor_disputes', to=settings.AUTH_USER_MODEL)),
                ('signature', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='disputes', to='core.signature')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BusinessAlert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('alert_type', models.CharField(choices=[('booking_timeout', 'Booking Timeout'), ('pending_signature', 'Pending Signature'), ('payment_hold', 'Payment Hold'), ('low_vendor_count', 'Low Vendor Count'), ('high_demand', 'High Demand'), ('service_completion_reminder', 'Service Completion Reminder'), ('system_error', 'System Error')], max_length=30)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('acknowledged', 'Acknowledged'), ('resolved', 'Resolved'), ('ignored', 'Ignored')], default='active', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_alerts', to=settings.AUTH_USER_MODEL)),
                ('related_booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.booking')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_alerts', to=settings.AUTH_USER_MODEL)),
                ('related_payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.payment')),
                ('related_signature', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.signature')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TravelTimeCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_pincode', models.CharField(db_index=True, max_length=10)),
                ('to_pincode', models.CharField(db_index=True, max_length=10)),
                ('distance_km', models.FloatField(help_text='Distance in kilometers')),
                ('duration_minutes', models.PositiveIntegerField(help_text='Travel time in minutes')),
                ('duration_in_traffic_minutes', models.PositiveIntegerField(blank=True, help_text='Travel time with traffic', null=True)),
                ('calculated_at', models.DateTimeField(auto_now=True)),
                ('google_maps_api_used', models.BooleanField(default=True)),
                ('confidence_score', models.FloatField(default=1.0, help_text='Accuracy confidence 0-1')),
                ('is_expired', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-calculated_at'],
                'indexes': [models.Index(fields=['from_pincode', 'to_pincode'], name='core_travel_from_pi_70ad59_idx'), models.Index(fields=['calculated_at'], name='core_travel_calcula_c1b695_idx')],
                'unique_together': {('from_pincode', 'to_pincode')},
            },
        ),
        migrations.CreateModel(
            name='VendorApplication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('pincode', models.CharField(max_length=10)),
                ('service_category', models.CharField(max_length=50)),
                ('experience', models.PositiveIntegerField(help_text='Years of experience')),
                ('id_proof', models.CharField(help_text='ID proof document path', max_length=255)),
                ('address_proof', models.CharField(help_text='Address proof document path', max_length=255)),
                ('profile_photo', models.CharField(help_text='Profile photo path', max_length=255)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('remarks', models.TextField(blank=True, help_text='Reviewer remarks for rejection')),
                ('ai_flag', models.BooleanField(default=False, help_text='AI detected suspicious application')),
                ('flag_reason', models.TextField(blank=True, help_text='Reason for AI flag')),
                ('flagged_at', models.DateTimeField(blank=True, help_text='When the application was flagged by AI', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_applications', to=settings.AUTH_USER_MODEL)),
                ('vendor_account', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vendor_application', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VendorAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], max_length=10)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('primary_pincode', models.CharField(help_text="Vendor's primary location", max_length=10)),
                ('service_radius_km', models.PositiveIntegerField(default=25, help_text='Maximum travel distance in km')),
                ('preferred_buffer_minutes', models.PositiveIntegerField(default=30, help_text='Preferred gap between bookings')),
                ('max_travel_time_minutes', models.PositiveIntegerField(default=60, help_text='Maximum acceptable travel time')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_slots', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['vendor', 'day_of_week', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='VendorBonus',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('bonus_type', models.CharField(choices=[('performance', 'Performance Bonus'), ('surge', 'Surge Pricing Bonus'), ('completion_rate', 'High Completion Rate'), ('satisfaction', 'High Satisfaction Score'), ('monthly_incentive', 'Monthly Incentive'), ('referral', 'Referral Bonus'), ('special_campaign', 'Special Campaign')], max_length=30)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('paid', 'Paid'), ('declined', 'Declined')], default='pending', max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('percentage', models.FloatField(blank=True, help_text='Bonus percentage if applicable', null=True)),
                ('criteria_met', models.JSONField(help_text='Criteria that qualified for this bonus')),
                ('calculation_details', models.JSONField(help_text='How the bonus amount was calculated')),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('period_start', models.DateField(help_text='Performance period start date')),
                ('period_end', models.DateField(help_text='Performance period end date')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_bonuses', to=settings.AUTH_USER_MODEL)),
                ('booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bonuses', to='core.booking')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bonuses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VendorDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('id_proof', 'ID Proof'), ('address_proof', 'Address Proof'), ('business_registration', 'Business Registration'), ('gst_certificate', 'GST Certificate'), ('pan_card', 'PAN Card'), ('bank_statement', 'Bank Statement'), ('qualification_certificate', 'Qualification Certificate'), ('experience_certificate', 'Experience Certificate'), ('police_clearance', 'Police Clearance Certificate'), ('other', 'Other')], max_length=30)),
                ('document_name', models.CharField(max_length=100)),
                ('document_file', models.FileField(upload_to='vendor_documents/%Y/%m/%d/')),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('mime_type', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=15)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='core.vendorapplication')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_documents', to=settings.AUTH_USER_MODEL)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DisputeMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(choices=[('text', 'Text Message'), ('image', 'Image'), ('document', 'Document'), ('system', 'System Message')], default='text', max_length=15)),
                ('content', models.TextField(blank=True)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='dispute_attachments/%Y/%m/%d/')),
                ('attachment_name', models.CharField(blank=True, max_length=255)),
                ('attachment_size', models.PositiveIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('attachment_mime_type', models.CharField(blank=True, max_length=100)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dispute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.dispute')),
                ('escalated_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='escalated_messages', to='core.disputemessage')),
                ('recipient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
                'indexes': [models.Index(fields=['dispute', 'created_at'], name='core_disput_dispute_44bbd0_idx'), models.Index(fields=['sender', 'recipient'], name='core_disput_sender__ed498f_idx'), models.Index(fields=['is_read'], name='core_disput_is_read_cc96bd_idx')],
            },
        ),
        migrations.CreateModel(
            name='Earnings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('released', 'Released'), ('on_hold', 'On Hold')], default='pending', max_length=20)),
                ('remarks', models.TextField(blank=True)),
                ('release_date', models.DateTimeField(blank=True, null=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='earning', to='core.booking')),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_earnings', to=settings.AUTH_USER_MODEL)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earnings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['vendor', 'status'], name='core_earnin_vendor__dadab9_idx'), models.Index(fields=['status', 'created_at'], name='core_earnin_status_9f23a0_idx')],
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_type', models.CharField(choices=[('otp', 'OTP Verification'), ('signature_request', 'Signature Request'), ('pincode_alert', 'Pincode Alert'), ('demand_notification', 'Demand Notification'), ('bonus_alert', 'Bonus Alert'), ('business_alert', 'Business Alert'), ('payment_hold', 'Payment Hold Alert'), ('booking_timeout', 'Booking Timeout'), ('pending_signature', 'Pending Signature Alert'), ('promotional', 'Promotional')], max_length=30)),
                ('method', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('websocket', 'WebSocket'), ('push', 'Push Notification')], max_length=20)),
                ('status', models.CharField(choices=[('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('pending', 'Pending')], default='pending', max_length=20)),
                ('subject', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-sent_at'],
                'indexes': [models.Index(fields=['recipient', 'notification_type'], name='core_notifi_recipie_ff4fe8_idx'), models.Index(fields=['method', 'status'], name='core_notifi_method_486eae_idx'), models.Index(fields=['sent_at'], name='core_notifi_sent_at_a459f2_idx')],
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_jobs', models.PositiveIntegerField(default=0)),
                ('completed_jobs', models.PositiveIntegerField(default=0)),
                ('cancelled_jobs', models.PositiveIntegerField(default=0)),
                ('total_ratings', models.PositiveIntegerField(default=0)),
                ('rating_sum', models.PositiveIntegerField(default=0)),
                ('disputes_raised', models.PositiveIntegerField(default=0)),
                ('disputes_against', models.PositiveIntegerField(default=0)),
                ('on_time_completions', models.PositiveIntegerField(default=0)),
                ('total_completions', models.PositiveIntegerField(default=0)),
                ('bonus_points', models.PositiveIntegerField(default=0)),
                ('tier', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold')], default='bronze', max_length=20)),
                ('last_calculated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('vendor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-bonus_points'],
                'indexes': [models.Index(fields=['vendor'], name='core_perfor_vendor__812894_idx'), models.Index(fields=['bonus_points'], name='core_perfor_bonus_p_e68230_idx'), models.Index(fields=['tier'], name='core_perfor_tier_cd5a71_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='dispute',
            index=models.Index(fields=['status', 'severity'], name='core_disput_status_73e0e3_idx'),
        ),
        migrations.AddIndex(
            model_name='dispute',
            index=models.Index(fields=['dispute_type'], name='core_disput_dispute_89adf6_idx'),
        ),
        migrations.AddIndex(
            model_name='dispute',
            index=models.Index(fields=['assigned_mediator'], name='core_disput_assigne_1690f6_idx'),
        ),
        migrations.AddIndex(
            model_name='dispute',
            index=models.Index(fields=['created_at'], name='core_disput_created_bce46a_idx'),
        ),
        migrations.AddIndex(
            model_name='businessalert',
            index=models.Index(fields=['alert_type', 'status'], name='core_busine_alert_t_d76f05_idx'),
        ),
        migrations.AddIndex(
            model_name='businessalert',
            index=models.Index(fields=['severity', 'status'], name='core_busine_severit_29c138_idx'),
        ),
        migrations.AddIndex(
            model_name='businessalert',
            index=models.Index(fields=['created_at'], name='core_busine_created_be6877_idx'),
        ),
        migrations.AddIndex(
            model_name='businessalert',
            index=models.Index(fields=['assigned_to'], name='core_busine_assigne_62f852_idx'),
        ),
        migrations.AddIndex(
            model_name='vendorapplication',
            index=models.Index(fields=['status', 'created_at'], name='core_vendor_status_cf55fd_idx'),
        ),
        migrations.AddIndex(
            model_name='vendorapplication',
            index=models.Index(fields=['pincode'], name='core_vendor_pincode_0e7e97_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vendoravailability',
            unique_together={('vendor', 'day_of_week', 'start_time')},
        ),
        migrations.AddIndex(
            model_name='vendorbonus',
            index=models.Index(fields=['vendor', 'bonus_type'], name='core_vendor_vendor__5f78f6_idx'),
        ),
        migrations.AddIndex(
            model_name='vendorbonus',
            index=models.Index(fields=['status', 'created_at'], name='core_vendor_status_7b2446_idx'),
        ),
        migrations.AddIndex(
            model_name='vendorbonus',
            index=models.Index(fields=['period_start', 'period_end'], name='core_vendor_period__c796c6_idx'),
        ),
        migrations.AddIndex(
            model_name='vendordocument',
            index=models.Index(fields=['application', 'document_type'], name='core_vendor_applica_2502fd_idx'),
        ),
        migrations.AddIndex(
            model_name='vendordocument',
            index=models.Index(fields=['status'], name='core_vendor_status_0dc534_idx'),
        ),
        migrations.AddIndex(
            model_name='vendordocument',
            index=models.Index(fields=['reviewed_by'], name='core_vendor_reviewe_9ae3cb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vendordocument',
            unique_together={('application', 'document_type')},
        ),
    ]
