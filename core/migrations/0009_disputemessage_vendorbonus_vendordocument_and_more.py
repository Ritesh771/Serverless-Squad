# Generated by Django 5.1 on 2025-10-12 22:52

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0008_update_auditlog_actions"),
    ]

    operations = [
        migrations.CreateModel(
            name="DisputeMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "message_type",
                    models.CharField(
                        choices=[
                            ("text", "Text Message"),
                            ("image", "Image"),
                            ("document", "Document"),
                            ("system", "System Message"),
                        ],
                        default="text",
                        max_length=15,
                    ),
                ),
                ("content", models.TextField(blank=True)),
                (
                    "attachment",
                    models.FileField(
                        blank=True, null=True, upload_to="dispute_attachments/%Y/%m/%d/"
                    ),
                ),
                ("attachment_name", models.CharField(blank=True, max_length=255)),
                (
                    "attachment_size",
                    models.PositiveIntegerField(
                        blank=True, help_text="File size in bytes", null=True
                    ),
                ),
                ("attachment_mime_type", models.CharField(blank=True, max_length=100)),
                ("is_read", models.BooleanField(default=False)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="VendorBonus",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "bonus_type",
                    models.CharField(
                        choices=[
                            ("performance", "Performance Bonus"),
                            ("surge", "Surge Pricing Bonus"),
                            ("completion_rate", "High Completion Rate"),
                            ("satisfaction", "High Satisfaction Score"),
                            ("monthly_incentive", "Monthly Incentive"),
                            ("referral", "Referral Bonus"),
                            ("special_campaign", "Special Campaign"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("paid", "Paid"),
                            ("declined", "Declined"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=8)),
                (
                    "percentage",
                    models.FloatField(
                        blank=True,
                        help_text="Bonus percentage if applicable",
                        null=True,
                    ),
                ),
                (
                    "criteria_met",
                    models.JSONField(
                        help_text="Criteria that qualified for this bonus"
                    ),
                ),
                (
                    "calculation_details",
                    models.JSONField(help_text="How the bonus amount was calculated"),
                ),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("paid_at", models.DateTimeField(blank=True, null=True)),
                (
                    "period_start",
                    models.DateField(help_text="Performance period start date"),
                ),
                (
                    "period_end",
                    models.DateField(help_text="Performance period end date"),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="VendorDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("id_proof", "ID Proof"),
                            ("address_proof", "Address Proof"),
                            ("business_registration", "Business Registration"),
                            ("gst_certificate", "GST Certificate"),
                            ("pan_card", "PAN Card"),
                            ("bank_statement", "Bank Statement"),
                            ("qualification_certificate", "Qualification Certificate"),
                            ("experience_certificate", "Experience Certificate"),
                            ("police_clearance", "Police Clearance Certificate"),
                            ("other", "Other"),
                        ],
                        max_length=30,
                    ),
                ),
                ("document_name", models.CharField(max_length=100)),
                (
                    "document_file",
                    models.FileField(upload_to="vendor_documents/%Y/%m/%d/"),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(help_text="File size in bytes"),
                ),
                ("mime_type", models.CharField(max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("under_review", "Under Review"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                        ],
                        default="pending",
                        max_length=15,
                    ),
                ),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("review_notes", models.TextField(blank=True)),
                ("rejection_reason", models.TextField(blank=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.RemoveIndex(
            model_name="dispute",
            name="core_disput_status_7f9979_idx",
        ),
        migrations.RemoveIndex(
            model_name="dispute",
            name="core_disput_custome_21f105_idx",
        ),
        migrations.RenameIndex(
            model_name="dispute",
            new_name="core_disput_status_73e0e3_idx",
            old_name="core_disput_status_7f9980_idx",
        ),
        migrations.RenameIndex(
            model_name="dispute",
            new_name="core_disput_dispute_89adf6_idx",
            old_name="core_disput_dispute_8a2b31_idx",
        ),
        migrations.RenameIndex(
            model_name="dispute",
            new_name="core_disput_assigne_1690f6_idx",
            old_name="core_disput_assigne_9c4d52_idx",
        ),
        migrations.RenameIndex(
            model_name="dispute",
            new_name="core_disput_created_bce46a_idx",
            old_name="core_disput_created_1e2f43_idx",
        ),
        migrations.RemoveField(
            model_name="dispute",
            name="updated_at",
        ),
        migrations.AddField(
            model_name="dispute",
            name="resolution_notes",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="dispute",
            name="resolved_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="dispute",
            name="customer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="customer_disputes",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="disputemessage",
            name="dispute",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="messages",
                to="core.dispute",
            ),
        ),
        migrations.AddField(
            model_name="disputemessage",
            name="escalated_from",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="escalated_messages",
                to="core.disputemessage",
            ),
        ),
        migrations.AddField(
            model_name="disputemessage",
            name="recipient",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="received_messages",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="disputemessage",
            name="sender",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sent_messages",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="vendorbonus",
            name="approved_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="approved_bonuses",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="vendorbonus",
            name="booking",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="bonuses",
                to="core.booking",
            ),
        ),
        migrations.AddField(
            model_name="vendorbonus",
            name="vendor",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="bonuses",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="vendordocument",
            name="application",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="documents",
                to="core.vendorapplication",
            ),
        ),
        migrations.AddField(
            model_name="vendordocument",
            name="reviewed_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="reviewed_documents",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="vendordocument",
            name="uploaded_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="uploaded_documents",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddIndex(
            model_name="disputemessage",
            index=models.Index(
                fields=["dispute", "created_at"], name="core_disput_dispute_44bbd0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="disputemessage",
            index=models.Index(
                fields=["sender", "recipient"], name="core_disput_sender__ed498f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="disputemessage",
            index=models.Index(
                fields=["is_read"], name="core_disput_is_read_cc96bd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vendorbonus",
            index=models.Index(
                fields=["vendor", "bonus_type"], name="core_vendor_vendor__5f78f6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vendorbonus",
            index=models.Index(
                fields=["status", "created_at"], name="core_vendor_status_7b2446_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vendorbonus",
            index=models.Index(
                fields=["period_start", "period_end"],
                name="core_vendor_period__c796c6_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="vendordocument",
            index=models.Index(
                fields=["application", "document_type"],
                name="core_vendor_applica_2502fd_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="vendordocument",
            index=models.Index(fields=["status"], name="core_vendor_status_0dc534_idx"),
        ),
        migrations.AddIndex(
            model_name="vendordocument",
            index=models.Index(
                fields=["reviewed_by"], name="core_vendor_reviewe_9ae3cb_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="vendordocument",
            unique_together={("application", "document_type")},
        ),
    ]
